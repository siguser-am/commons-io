# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- group: coverity-azure

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- bash: |
   CSA=cov-analysis-linux64-2021.03
   set -x
   cd $(Agent.BuildDirectory)
   curl -kfLsS --user $(COV_USER):$(COVERITY_PASSPHRASE) $(COV_URL)/downloadFile.htm?fn=$CSA.tar.gz | tar -xzf -
   curl -kfLsS --user $(COV_USER):$(COVERITY_PASSPHRASE) -o license.dat $(COV_URL)/downloadFile.htm?fn=license.dat
   mv license.dat $CSA/bin
   COVERITY_TOOL_HOME="$(Agent.BuildDirectory)/$CSA"
   echo "##vso[task.setvariable variable=COVERITY_TOOL_HOME]$COVERITY_TOOL_HOME"
   $COVERITY_TOOL_HOME/bin/cov-configure --java
  displayName: 'Coverity Download'

- bash: |
    $COVERITY_TOOL_HOME/bin/cov-build --dir idir mvn clean compile -Drat.skip=true -DskipTests > /dev/null
    $COVERITY_TOOL_HOME/bin/cov-analyze --ticker-mode none --strip-path $(Build.SourcesDirectory) --dir idir --disable-fb --jobs auto
    $COVERITY_TOOL_HOME/bin/cov-format-errors --json-output-v8 coverity-errors.json --dir idir

    echo $COVERITY_TOOL_HOME/node/bin/node $COVERITY_TOOL_HOME/SARIF//cov-format-sarif-for-github.js --inputFile coverity-errors.json --outputFile coverity-errors.SARIF --repoName $(Build.Repository.Name) --checkoutPath $(Build.Repository.Name) $(Build.SourceBranchName) $(Build.SourceVersion)
    $COVERITY_TOOL_HOME/node/bin/node $COVERITY_TOOL_HOME/SARIF//cov-format-sarif-for-github.js --inputFile coverity-errors.json --outputFile coverity-errors.SARIF --repoName $(Build.Repository.Name) --checkoutPath $(Build.Repository.Name) $(Build.SourceBranchName) $(Build.SourceVersion)


- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.SourcesDirectory)/coverity-errors.SARIF'
    artifact: 'CodeAnalysisLogs'
    publishLocation: 'pipeline'